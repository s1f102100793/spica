datasource db {
  provider = "postgresql"
  url      = env("API_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Task {
  id        String   @id
  userId    String
  label     String
  done      Boolean
  createdAt DateTime
}

model Employee {
  firebaseUid     String            @id
  name            String
  email           String            @unique
  createdAt       DateTime          @default(now())
  isDeleted       Boolean           @default(false)
  profile         EmployeeProfile?
  EmployeeCompany EmployeeCompany[]
  UserRole        EmployeeRole[]
  Tip             Tip[]
}

model EmployeeProfile {
  profileId    Int      @id @default(autoincrement())
  employeeId   String   @unique
  profileImage String   @default("/images/default.png")
  createdAt    DateTime
  employee     Employee @relation(fields: [employeeId], references: [firebaseUid], onDelete: Cascade)
}

model Company {
  id              Int               @id @default(autoincrement())
  name            String
  address         String
  description     String
  tips            Tip[]
  EmployeeCompany EmployeeCompany[]
  CompanyTip      CompanyTip[]
}

model EmployeeCompany {
  id         Int      @id @default(autoincrement())
  employee   Employee @relation(fields: [employeeId], references: [firebaseUid], onDelete: Cascade)
  employeeId String
  company    Company  @relation(fields: [companyId], references: [id])
  companyId  Int

  @@unique([employeeId, companyId])
}

model Role {
  id        Int            @id @default(autoincrement())
  roleName  String
  employees EmployeeRole[]
}

model EmployeeRole {
  id         Int      @id @default(autoincrement())
  employee   Employee @relation(fields: [employeeId], references: [firebaseUid], onDelete: Cascade)
  employeeId String
  role       Role     @relation(fields: [roleId], references: [id])
  roleId     Int
}

model Tip {
  id         Int      @id @default(autoincrement())
  employee   Employee @relation(fields: [employeeId], references: [firebaseUid])
  employeeId String
  company    Company  @relation(fields: [companyId], references: [id])
  companyId  Int
  amount     Float
  createdAt  DateTime @default(now())
}

model CompanyTip {
  id        Int      @id @default(autoincrement())
  companyId Int
  amount    Float
  createdAt DateTime @default(now())
  company   Company  @relation(fields: [companyId], references: [id])
}
